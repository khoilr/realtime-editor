extends layout
block content
	h1 Editor ID: #{room}

	
	#editor
	button.btn.btn-outline-primary.form-control(type='button' onclick='saveAsDoc()') Save file
	script(src = 'https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js')
	script(src = 'https://cdn.jsdelivr.net/npm/turndown/dist/turndown.js')
	script.
		const socket = io() 
		const room = '#{room}'
		const user = '#{user}'

		socket.emit('join-editor', room)

		// Quill rich text editor
		const quill = new Quill('#editor', {
			theme: 'snow'
		})

		socket.on('update-text', (data)=> {
			console.log(data)
			const {room, user, value} = data
			quill.pasteHTML(value)
		})

		// handle #editor .ql-editor on change
		document.querySelector('#editor .ql-editor').addEventListener('keyup', () => {
			const value = document.querySelector('#editor .ql-editor').innerHTML
			console.log(value)
			socket.emit('text-change', { value, room, user })
		});

		async function saveAsDoc()  {
			// Load the turndown library
			const turndownService = new TurndownService();
			// Get the rich text content to be saved
			let richTextContent = document.querySelector('#editor .ql-editor').innerHTML;
			
			// Convert the rich text content to Markdown
			let markdownContent = turndownService.turndown(richTextContent);

			// Create a new Blob object with the Markdown content
			let blob = new Blob([markdownContent], {type: 'text/markdown'});
			

			// (B) FILE HANDLER & FILE STREAM
			const fileHandle = await window.showSaveFilePicker({
				suggestedName: 'United.md',
				types: [{
				description: "Markdown file",
				accept: {'text/markdown': [".md"]}
				}]
			});
			const fileStream = await fileHandle.createWritable();
			
			// (C) WRITE FILE
			await fileStream.write(blob);
			await fileStream.close();
						
		}


